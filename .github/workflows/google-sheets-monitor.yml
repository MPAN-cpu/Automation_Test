name: Monitor Google Sheets Updates

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    # Run when code is pushed (for testing)
    branches: [ main, master ]

permissions:
  issues: write
  contents: read

jobs:
  check-sheets-updates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install pandas requests
        
    - name: Restore state cache
      uses: actions/cache@v3
      with:
        path: sheets_state.json
        key: sheets-state-${{ secrets.GOOGLE_SHEETS_ID }}
        
    - name: Check for Google Sheets updates
      id: check-updates
      env:
        GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
        SHEET_NAME: ${{ secrets.SHEET_NAME }}
      run: python scripts/check_sheets_updates.py
      
    - name: Save state cache
      uses: actions/cache@v3
      with:
        path: sheets_state.json
        key: sheets-state-${{ secrets.GOOGLE_SHEETS_ID }}
        
    - name: Create issue on update
      if: steps.check-updates.outputs.has_updates == 'true'
      uses: actions/github-script@v7
      env:
        GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
        SHEET_NAME: ${{ secrets.SHEET_NAME }}
        PROJECT_NUMBER: ${{ secrets.PROJECT_NUMBER }}
        PROJECT_COLUMN_ID: ${{ secrets.PROJECT_COLUMN_ID }}
      with:
        script: |
          // Get the instanceID from the script output
          const instanceId = '${{ steps.check-updates.outputs.latest_instance_id }}';
          
          // Create custom title with instanceID if available
          let title;
          if (instanceId && instanceId !== '') {
            title = `New Instance Added - ${instanceId} - ${new Date().toISOString().slice(0, 19).replace('T', ' ')}`;
          } else {
            title = `Google Sheets Update - ${new Date().toISOString().slice(0, 19).replace('T', ' ')}`;
          }
          
          // Create the issue for every change detected
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: `A new record has been updated in the Google Sheet.\n\n**Sheet ID:** ${process.env.GOOGLE_SHEETS_ID}\n**Sheet Name:** ${process.env.SHEET_NAME}\n**Instance ID:** ${instanceId || 'Not available'}\n**Timestamp:** ${new Date().toISOString()}\n\nThis issue was automatically created by GitHub Actions.`,
            labels: ['google-sheets-update', 'automated']
          });
          
          // Add issue to project if project number is provided
          if (process.env.PROJECT_NUMBER) {
            try {
              // Get project ID from project number
              const projects = await github.rest.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const project = projects.data.find(p => p.number == process.env.PROJECT_NUMBER);
              
              if (project) {
                // Get project columns
                const columns = await github.rest.projects.listColumns({
                  project_id: project.id
                });
                
                // Use first column if no specific column ID is provided
                const targetColumnId = process.env.PROJECT_COLUMN_ID || columns.data[0].id;
                
                // Create project card
                await github.rest.projects.createCard({
                  column_id: targetColumnId,
                  content_id: issue.data.id,
                  content_type: 'Issue'
                });
                
                console.log(`✅ Added issue #${issue.data.number} to project #${process.env.PROJECT_NUMBER}`);
              } else {
                console.log(`❌ Project #${process.env.PROJECT_NUMBER} not found`);
              }
            } catch (error) {
              console.log(`❌ Could not add issue to project: ${error.message}`);
            }
          } else {
            console.log(`ℹ️ No PROJECT_NUMBER secret provided, skipping project assignment`);
          } 
